---
interface Props {
  properties: any[];
  initialType?: string;
}

const { properties, initialType = '' } = Astro.props;

// Obtener tipos √∫nicos de propiedades
const propertyTypes = [...new Set(properties.map(prop => prop.Tipo))].filter(Boolean);

// Obtener comunas √∫nicas de propiedades
const comunas = [...new Set(properties.map(prop => prop.Comuna))].filter(Boolean).sort();

// Filtrar propiedades por tipo
const filteredProperties = initialType 
  ? properties.filter(prop => prop.Tipo === initialType)
  : properties;
---

<div class="property-type-filter">
  <div class="filter-section">
    <div class="filter-buttons">
      <button
        class={`filter-btn ${!initialType ? 'active' : ''}`}
        data-type=""
        aria-label="Ver todas las propiedades"
      >
        üèòÔ∏è Todas
      </button>
      {propertyTypes.map(type => (
        <button
          class={`filter-btn ${type === initialType ? 'active' : ''}`}
          data-type={type}
          aria-label={`Ver solo ${String(type).toLowerCase()}s`}
        >
                  {type === 'Casa' ? 'üè†' : 'üè¢'} {type}
      </button>
    ))}
  </div>
  
  <div class="comuna-filter">
         <label for="comuna-select" class="comuna-label">
       Buscar por comuna
     </label>
    <select id="comuna-select" class="comuna-select" aria-label="Filtrar por comuna">
      <option value="">Todas las comunas</option>
      {comunas.map((comuna: string) => (
        <option value={comuna}>{comuna}</option>
      ))}
    </select>
  </div>
  </div>
  
  <div class="property-grid" id="filtered-properties">
    {filteredProperties.length > 0 ? (
      filteredProperties.map((prop: any) => {
        const imagenUrl = prop.Imagenes?.[0]?.url?.startsWith('http') 
          ? prop.Imagenes[0].url 
          : `https://truthful-rhythm-e8bcafa766.strapiapp.com${prop.Imagenes?.[0]?.url || '/assets/images/propiedad-default.jpg'}`;
        const precioFormateado = prop.Precio 
          ? `UF ${prop.Precio.toLocaleString('es-CL')}` 
          : prop.Precio_CLP 
            ? `$${prop.Precio_CLP.toLocaleString('es-CL')}` 
            : 'Consultar';
        return (
          <article class="featured-property-card mobile-similar-style" data-type={prop.Tipo} data-comuna={prop.Comuna}>
            <a href={`/propiedades/${prop.Slug}`} class="featured-property-image-link">
              <img src={imagenUrl} alt={prop.Titulo} class="featured-property-image" />
            </a>
            <div class="featured-property-content">
              <h2 class="featured-property-title">{prop.Titulo || 'Propiedad sin t√≠tulo'}</h2>
              <div class="featured-property-location">{prop.Ubicacion || 'Sin ubicaci√≥n'}</div>
              <div class="featured-property-price">{precioFormateado}</div>
              <div class="featured-property-features mobile-features">
                {prop.Dormitorios && <span>
                  <img src="/assets/icons/bed.svg" alt="Dormitorios" style="width:16px; height:16px; vertical-align:middle; margin-right:4px;">
                  {prop.Dormitorios}
                </span>}
                {prop.Banos && <span>
                  <img src="/assets/icons/shower.svg" alt="Ba√±os" style="width:16px; height:16px; vertical-align:middle; margin-right:4px;">
                  {prop.Banos}
                </span>}
                {prop.Superficie && <span>
                  <img src="/assets/icons/mt2.svg" alt="Metros cuadrados" style="width:16px; height:16px; vertical-align:middle; margin-right:4px;">
                  {prop.Superficie} m¬≤
                </span>}
                {prop.M2utiles && <span>
                  <img src="/assets/icons/utiles.svg" alt="Metros √∫tiles" style="width:16px; height:16px; vertical-align:middle; margin-right:4px;">
                  {prop.M2utiles} m¬≤
                </span>}
              </div>
              <a href={`/propiedades/${prop.Slug}`} class="featured-property-btn mobile-btn">
                Ver Propiedad
              </a>
            </div>
          </article>
        )
      })
    ) : (
      <p>No hay propiedades disponibles en este momento.</p>
    )}
  </div>
</div>

<style>
  .property-type-filter {
    margin-bottom: 2rem;
  }

  .filter-section {
    margin-bottom: 2rem;
  }

  .filter-buttons {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
  }

  .comuna-filter {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  /* Desktop: Filtro de comuna a la derecha */
  @media (min-width: 769px) {
    .filter-buttons {
      margin-bottom: 0;
    }

    .comuna-filter {
      margin-bottom: 0;
      margin-left: 2rem;
      flex-direction: row;
      align-items: center;
      gap: 0.75rem;
    }

    .filter-section {
      display: flex;
      align-items: center;
      justify-content: center;
      flex-wrap: wrap;
      gap: 1rem;
    }
  }

  .comuna-label {
    display: flex;
    align-items: center;
    font-family: var(--font-primary);
    font-size: 1rem;
    color: var(--color-text-secondary);
    font-weight: 500;
  }

  .comuna-select {
    background: var(--color-background);
    border: 1px solid var(--color-border);
    color: var(--color-text-secondary);
    padding: 0.75rem 1rem;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: var(--font-primary);
    font-size: 1rem;
    min-width: 200px;
    max-width: 300px;
  }

  .comuna-select:hover {
    border-color: var(--color-primary-accent);
  }

  .comuna-select:focus {
    outline: none;
    border-color: var(--color-primary-accent);
    box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
  }

  .filter-btn {
    background: var(--color-background);
    border: 1px solid var(--color-border);
    color: var(--color-text-secondary);
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: var(--font-primary);
    font-size: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .filter-btn:hover {
    border-color: var(--color-primary-accent);
  }

  .filter-btn.active {
    color: var(--color-text-primary);
    border-color: var(--color-primary-accent);
    background: rgba(0, 0, 0, 0.05);
  }

  @media (max-width: 768px) {
    .filter-buttons {
      gap: 0.5rem;
    }

    .filter-btn {
      padding: 0.5rem 1rem;
      font-size: 0.9rem;
    }

    .comuna-select {
      min-width: 180px;
      max-width: 250px;
      padding: 0.6rem 0.8rem;
      font-size: 0.9rem;
    }

    .comuna-label {
      font-size: 0.9rem;
    }
  }

  .featured-property-card {
    display: none;
  }

  .featured-property-card.visible {
    display: block;
  }
</style>

<script>
  function initializeFilter() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const comunaSelect = document.getElementById('comuna-select');
    const propertyGrid = document.getElementById('filtered-properties');
    const allProperties = Array.from(propertyGrid?.children || []);

    let selectedType = '';
    let selectedComuna = '';

    function applyFilters() {
      allProperties.forEach(property => {
        if (property instanceof HTMLElement) {
          const propertyType = property.getAttribute('data-type');
          const propertyComuna = property.getAttribute('data-comuna');
          
          const typeMatch = !selectedType || propertyType === selectedType;
          const comunaMatch = !selectedComuna || propertyComuna === selectedComuna;
          
          property.classList.toggle('visible', typeMatch && comunaMatch);
        }
      });

      // Actualizar layout de la grilla
      propertyGrid?.classList.remove('filtered');
      void propertyGrid?.offsetWidth;
      propertyGrid?.classList.add('filtered');
    }

    // Manejar filtros de tipo
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Actualizar estado activo de los botones
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');

        selectedType = button.getAttribute('data-type') || '';
        applyFilters();
      });
    });

    // Manejar filtro de comuna
    if (comunaSelect) {
      comunaSelect.addEventListener('change', () => {
        selectedComuna = (comunaSelect as HTMLSelectElement).value;
        applyFilters();
      });
    }

    // Mostrar todas las propiedades inicialmente
    allProperties.forEach(property => {
      if (property instanceof HTMLElement) {
        property.classList.add('visible');
      }
    });
  }

  // Inicializar cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', initializeFilter);

  // Reinicializar cuando cambie el contenido din√°micamente (para Astro View Transitions)
  document.addEventListener('astro:page-load', initializeFilter);
</script> 